'use client';

import { useState, useEffect } from 'react';
import { kalService } from '../services/kal_service';

interface ActivityFactorButtonProps {
  onSaved?: (level: number, label: string) => void;
  onCaloriesUpdated?: () => void; // Callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
}

const ACTIVITY_LEVELS = [
  { level: 1, label: '‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡∏Å', description: '‡∏ô‡∏≠‡∏ô‡πÄ‡∏â‡∏¢‡πÜ', factor: 1.2 },
  { level: 2, label: '‡∏ô‡πâ‡∏≠‡∏¢', description: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏≤‡πÜ ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡πà‡∏ô', factor: 1.4 },
  { level: 3, label: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á', description: '‡∏¢‡∏∑‡∏ô ‡πÄ‡∏î‡∏¥‡∏ô ‡∏¢‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢', factor: 1.6 },
  { level: 4, label: '‡∏°‡∏≤‡∏Å', description: '‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏´‡∏ô‡∏±‡∏Å', factor: 1.7 },
  { level: 5, label: '‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î', description: '‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤', factor: 1.9 },
];

// ‡πÅ‡∏õ‡∏•‡∏á activity factor (1.2-1.9) ‡πÄ‡∏õ‡πá‡∏ô level (1-5) ‡πÅ‡∏•‡∏∞ label
function getLevelFromActivityFactor(factor: number): { level: number; label: string } {
  if (factor === 1.2) return { level: 1, label: '‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡∏Å' };
  if (factor === 1.4) return { level: 2, label: '‡∏ô‡πâ‡∏≠‡∏¢' };
  if (factor === 1.6) return { level: 3, label: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' };
  if (factor === 1.7) return { level: 4, label: '‡∏°‡∏≤‡∏Å' };
  if (factor === 1.9) return { level: 5, label: '‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î' };
  return { level: 0, label: '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö' };
}

export default function ActivityFactorButton({ onSaved, onCaloriesUpdated }: ActivityFactorButtonProps) {
  const [savedLevel, setSavedLevel] = useState<number | null>(null);
  const [savedLabel, setSavedLabel] = useState<string | null>(null);
  const [isLocked, setIsLocked] = useState(false);
  const [modalOpen, setModalOpen] = useState(false);
  const [selectedLevel, setSelectedLevel] = useState<number | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    loadSavedData();
  }, []);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
  const loadSavedData = async () => {
    try {
      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å API ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const status = await kalService.getCalorieStatus();

      console.log('üîç Activity Level Check:');
      console.log('  - API activityLevel:', status.activity_level);
      console.log('  - API targetCalories:', status.target_calories);

      if (status.target_calories > 0 && status.activity_level > 0) {
        // ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô API - ‡∏î‡∏∂‡∏á activity level ‡∏à‡∏≤‡∏Å DB
        const levelData = getLevelFromActivityFactor(status.activity_level);
        const level = levelData.level;
        const label = levelData.label;

        console.log(`‚úÖ Found in API - Level ${level}: ${label} (factor: ${status.activity_level})`);

        setSavedLevel(level);
        setSavedLabel(label);
        setIsLocked(true);

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fallback
        localStorage.setItem('activity_level', level.toString());
        localStorage.setItem('activity_label', label);
        localStorage.setItem('activity_timestamp', new Date().toISOString());
      } else {
        // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ
        setIsLocked(false);
        setSavedLevel(null);
        setSavedLabel(null);
      }
    } catch (e) {
      console.error('Error loading activity level status:', e);
      // ‡∏ñ‡πâ‡∏≤ error ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å localStorage ‡πÅ‡∏ó‡∏ô
      const storedLevel = localStorage.getItem('activity_level');
      const storedLabel = localStorage.getItem('activity_label');
      const storedTimestamp = localStorage.getItem('activity_timestamp');

      if (storedLevel && storedLabel && storedTimestamp) {
        const savedDate = new Date(storedTimestamp);
        const now = new Date();
        const isSameDay =
          savedDate.getFullYear() === now.getFullYear() &&
          savedDate.getMonth() === now.getMonth() &&
          savedDate.getDate() === now.getDate();

        setSavedLevel(parseInt(storedLevel));
        setSavedLabel(storedLabel);
        setIsLocked(isSameDay);
      }
    }
  };

  const handleSave = async () => {
    if (selectedLevel == null) {
      alert('‚ö†Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞!');
      return;
    }

    const levelData = ACTIVITY_LEVELS.find((item) => item.level === selectedLevel)!;
    const activityFactor = levelData.factor;

    // ‡πÅ‡∏™‡∏î‡∏á loading
    setIsLoading(true);

    try {
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å BMR, TDEE, Target Calories ‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      console.log('üî¢ Calculating and saving calories with factor:', activityFactor);
      const result = await kalService.calculateAndSaveCalories(activityFactor);
      console.log(`‚úÖ Successfully calculated: BMR=${result.bmr}, TDEE=${result.tdee}, Target=${result.target_calories}`);

      // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ DB commit ‡πÄ‡∏™‡∏£‡πá‡∏à
      await new Promise(resolve => setTimeout(resolve, 300));

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å localStorage
      localStorage.setItem('activity_level', levelData.level.toString());
      localStorage.setItem('activity_label', levelData.label);
      localStorage.setItem('activity_timestamp', new Date().toISOString());

      setSavedLevel(levelData.level);
      setSavedLabel(levelData.label);
      setIsLocked(true);
      setModalOpen(false);
      setIsLoading(false);

      onSaved?.(levelData.level, levelData.label);
      onCaloriesUpdated?.(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Kcalbar
      alert(`‚ú® ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å LV.${levelData.level}: ${levelData.label} ‡πÅ‡∏•‡πâ‡∏ß!`);
    } catch (e: any) {
      console.error('‚ùå Error in calculateCalories:', e);
      setIsLoading(false);
      alert(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.message}`);
    }
  };

  const handleClick = () => {
    if (isLocked) {
      alert('‚≠ê ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ô‡∏∞!');
      return;
    }
    setModalOpen(true);
  };

  return (
    <>
      {/* ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å */}
      <div
        onClick={handleClick}
        className={`cursor-pointer flex items-center h-15 px-4 border-4 border-black
          ${savedLevel ? 'bg-[#FFF9BD]' : 'bg-gray-200'}
          text-black shadow-[3px_3px_0_0_black]`}
      >
        {/* LV Box */}
        <div className="w-10 h-10 border-2 border-black bg-transparent flex items-center justify-center mr-2 text-white">
          {savedLevel ? (
            <div className="text-center text-[#000000]">
              <div className="text-[9px] font-bold font-mono">LV</div>
              <div className="text-[17px] font-bold font-mono">{savedLevel}</div>
            </div>
          ) : (
            <span className="text-xl text-[#000000]">üèÉ</span>
          )}
        </div>

        {/* Activity Text */}
        <div className="flex-1 flex flex-col justify-center">
          <span className="text-[11px] font-bold font-mono tracking-wider">ACTIVITY</span>
          <span className="text-[14px] font-bold font-mono">{savedLabel ?? '‡∏Å‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å'}</span>
        </div>

        <span className="text-sm ml-2">‚ñ∂</span>
      </div>

      {/* Modal */}
      {modalOpen && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-70 z-50">
          <div className="bg-white border-4 border-black max-w-md w-full p-4 text-black">
            <h2 className="font-mono font-bold text-center bg-[#FFF9BD] py-2 mb-4">
              ACTIVITY LEVEL
            </h2>
            <div className="space-y-2 max-h-80 overflow-y-auto">
              {ACTIVITY_LEVELS.map((item) => (
                <div
                  key={item.level}
                  onClick={() => setSelectedLevel(item.level)}
                  className={`flex items-center p-2 cursor-pointer ${
                    selectedLevel === item.level ? 'bg-[#FFF9BD]' : 'bg-gray-200'
                  }`}
                >
                  <div className="w-9 h-9 border-2 border-black bg-white flex items-center justify-center mr-2 font-mono font-bold">
                    {item.level}
                  </div>
                  <div className="flex-1">
                    <div className="font-mono font-bold">{item.label}</div>
                    <div className="text-xs font-mono">{item.description}</div>
                  </div>
                  {selectedLevel === item.level && (
                    <div className="w-4 h-4 bg-black text-yellow-400 flex items-center justify-center font-mono text-[10px]">
                      ‚úî
                    </div>
                  )}
                </div>
              ))}
            </div>
            <div className="flex mt-4 gap-2">
              <button
                onClick={() => setModalOpen(false)}
                disabled={isLoading}
                className="flex-1 h-9 bg-gray-300 border border-black font-mono font-bold disabled:opacity-50"
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
              <button
                onClick={handleSave}
                disabled={isLoading}
                className="flex-1 h-9 bg-[#FFF9BD] border border-black font-mono font-bold disabled:opacity-50"
              >
                {isLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'}
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
