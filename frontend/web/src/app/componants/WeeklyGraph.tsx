'use client';

import { useState, useEffect, useRef } from 'react';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer
} from 'recharts';

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á (Mock Data): ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (Net Calories: Intake - Burned) ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô
// ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å API ‡∏´‡∏£‡∏∑‡∏≠ Database
const weeklyData = [
  { name: 'Mon', NetCal: 1850 },
  { name: 'Tue', NetCal: 2100 },
  { name: 'Wed', NetCal: 1500 },
  { name: 'Thu', NetCal: 2400 },
  { name: 'Fri', NetCal: 1950 },
  { name: 'Sat', NetCal: 2600 },
  { name: 'Sun', NetCal: 1700 },
];

export default function WeeklyGraph() {
  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ component mount ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î
    const updateDimensions = () => {
      if (containerRef.current) {
        const { width, height } = containerRef.current.getBoundingClientRect();
        console.log('üìä [WeeklyGraph] Container dimensions:', { width, height });

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 0)
        if (width > 0 && height > 0) {
          setDimensions({ width, height });
        } else {
          // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡∏ô‡∏≤‡∏î ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á 200ms
          console.log('üìä [WeeklyGraph] Dimensions not ready, retrying...');
          setTimeout(updateDimensions, 200);
        }
      }
    };

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ layout ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
    setTimeout(updateDimensions, 100);

    // Update ‡πÄ‡∏°‡∏∑‡πà‡∏≠ resize
    window.addEventListener('resize', updateDimensions);
    return () => window.removeEventListener('resize', updateDimensions);
  }, []);

  return (
    <div
      ref={containerRef}
      className="w-full h-full bg-white rounded-lg shadow-md p-4"
      style={{ minHeight: '300px' }}
    >
      {dimensions.width > 0 && dimensions.height > 0 ? (
        <ResponsiveContainer width="100%" height="100%" minHeight={250}>
        <LineChart
          data={weeklyData}
          margin={{
            top: 5,
            right: 30,
            left: 20,
            bottom: 0,
          }}
        >
          {/* ‡πÄ‡∏™‡πâ‡∏ô Grid ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô */}
          <CartesianGrid strokeDasharray="3 3" stroke="#e0e0e0" />
          
          {/* ‡πÅ‡∏Å‡∏ô X (‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå) */}
          <XAxis dataKey="name" stroke="#555" />
          
          {/* ‡πÅ‡∏Å‡∏ô Y (‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà) */}
          <YAxis stroke="#555" />
          
          {/* Tooltip (‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î) */}
          <Tooltip 
            formatter={(value, name) => [`${value} Kcal`, '‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏™‡∏∏‡∏ó‡∏ò‡∏¥']} 
            contentStyle={{ borderRadius: '8px', border: '1px solid #ccc' }}
          />
          
          {/* Legend (‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô) */}
          <Legend />
          
          {/* ‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡∏´‡∏•‡∏±‡∏Å */}
          <Line 
            type="monotone" // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏á
            dataKey="NetCal" 
            name="‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏™‡∏∏‡∏ó‡∏ò‡∏¥"
            stroke="#4caf50" // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ
            strokeWidth={3}
            dot={{ r: 5, fill: '#4caf50' }} // ‡∏à‡∏∏‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            activeDot={{ r: 8 }} // ‡∏à‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ hover
          />
        </LineChart>
      </ResponsiveContainer>
      ) : (
        <div className="w-full h-full flex items-center justify-center">
          <p className="text-gray-500 font-mono text-sm">Loading chart...</p>
        </div>
      )}
    </div>
  );
}