// ‡πÉ‡∏ä‡πâ axios instance ‡∏à‡∏≤‡∏Å auth_service ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ interceptor ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô
import api, { authAPI } from './auth_service';

// ========================================
// Types ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API
// ========================================
export interface MealItem {
  food_name: string;
  calories: number;
}

export interface ActivityItem {
  sport_name: string;
  time: number;
  calories_burned: number;
}

export interface TodayMealsResponse {
  date: string;
  meals: MealItem[];
}

export interface TodayActivitiesResponse {
  date: string;
  activities: ActivityItem[];
}

// ========================================
// List API (Services)
// ========================================
export const listAPI = {
  /**
   * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
   * ‡πÉ‡∏ä‡πâ userId ‡∏à‡∏≤‡∏Å localStorage (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á parameter)
   * token ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ú‡πà‡∏≤‡∏ô interceptor
   */
  getTodayMeals: async (): Promise<TodayMealsResponse> => {
    try {
      // ‡∏î‡∏∂‡∏á userId ‡∏à‡∏≤‡∏Å localStorage
      const user = authAPI.getCurrentUser();

      console.log('üçΩÔ∏è [getTodayMeals] Current user from localStorage:', user);

      if (!user || !user.id) {
        console.error('‚ùå [getTodayMeals] No user or user.id found in localStorage');
        throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
      }

      console.log('üçΩÔ∏è [getTodayMeals] Fetching meals for user ID:', user.id);

      const response = await api.get<TodayMealsResponse>(
        `/api/daily/meals/${user.id}`
      );

      console.log('‚úÖ [getTodayMeals] Response:', response.data);

      return response.data;
    } catch (error: any) {
      console.error('‚ùå [getTodayMeals] Error:', error);
      if (error.response?.status === 404) {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ return ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á
        console.log('üçΩÔ∏è [getTodayMeals] No meals found (404), returning empty array');
        return {
          date: new Date().toISOString().split('T')[0],
          meals: [],
        };
      }
      throw error;
    }
  },

  /**
   * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°/‡∏Å‡∏µ‡∏¨‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
   * ‡πÉ‡∏ä‡πâ userId ‡∏à‡∏≤‡∏Å localStorage (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á parameter)
   * token ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ú‡πà‡∏≤‡∏ô interceptor
   */
  getTodayActivities: async (): Promise<TodayActivitiesResponse> => {
    try {
      // ‡∏î‡∏∂‡∏á userId ‡∏à‡∏≤‡∏Å localStorage
      const user = authAPI.getCurrentUser();

      console.log('üìã [getTodayActivities] Current user from localStorage:', user);

      if (!user || !user.id) {
        console.error('‚ùå [getTodayActivities] No user or user.id found in localStorage');
        throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
      }

      console.log('üìã [getTodayActivities] Fetching activities for user ID:', user.id);

      const response = await api.get<TodayActivitiesResponse>(
        `/api/daily/activities/${user.id}`
      );

      console.log('‚úÖ [getTodayActivities] Response:', response.data);

      return response.data;
    } catch (error: any) {
      console.error('‚ùå [getTodayActivities] Error:', error);
      if (error.response?.status === 404) {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ return ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á
        console.log('üìã [getTodayActivities] No activities found (404), returning empty array');
        return {
          date: new Date().toISOString().split('T')[0],
          activities: [],
        };
      }
      throw error;
    }
  },
};
