/// API Configuration
///
/// ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
/// 1. Development (Local): ‡πÉ‡∏ä‡πâ localhost ‡∏´‡∏£‡∏∑‡∏≠ 192.168.100.67
/// 2. Production (Public IP): ‡πÉ‡∏ä‡πâ IP Public ‡∏Ç‡∏≠‡∏á‡∏ö‡πâ‡∏≤‡∏ô
/// 3. Cloud Deploy: ‡πÉ‡∏ä‡πâ Ngrok/Railway/Render URL
class ApiConfig {
  // ‚öôÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô URL ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  // Node.js Backend (port 4000)
  static const String _baseUrl = 'http://localhost:4000';

  // Flask ML Server (port 5000)
  static const String _flaskUrl = 'http://localhost:5000';

  // üîπ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Development (‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô):
  //    - Physical Device (‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏à‡∏£‡∏¥‡∏á):
  //      Node.js: 'http://10.13.2.102:4000'
  //      Flask: 'http://10.13.2.102:5000'
  //10.13.2.112
  //    - Android Emulator:
  //      Node.js: 'http://10.0.2.2:4000'
  //      Flask: 'http://10.0.2.2:5000'
  //    - iOS Simulator:
  //      Node.js: 'http://localhost:4000'
  //      Flask: 'http://localhost:5000'
  //    - Web Browser:
  //      Node.js: 'http://localhost:4000'
  //      Flask: 'http://localhost:5000'

  // ========================================
  // Node.js Backend API Endpoints (port 4000)
  // ========================================
  static String get baseUrl => _baseUrl;
  static String get authUrl => '$_baseUrl/api/auth';
  static String get profileUrl => '$_baseUrl/api/profile';
  static String get dailyUrl => '$_baseUrl/api/daily';
  static String get uploadsUrl => '$_baseUrl/uploads';

  // ========================================
  // Flask ML Server API Endpoints (port 5000)
  // ========================================
  static String get flaskUrl => _flaskUrl;
  static String get predictUrl => '$_flaskUrl/api/predict-food';
  static String get saveMealUrl => '$_flaskUrl/api/save-meal';
  static String get foodRecommendUrl => '$_flaskUrl/api/food-recommend';
  static String get sportRecommendUrl => '$_flaskUrl/api/sport-recommend';

  // Helper method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á full image URL
  static String getImageUrl(String imagePath) {
    // ‡∏ñ‡πâ‡∏≤ imagePath ‡πÄ‡∏õ‡πá‡∏ô full URL ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ return ‡πÄ‡∏•‡∏¢
    if (imagePath.startsWith('http://') || imagePath.startsWith('https://')) {
      return imagePath;
    }

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô path ‡πÅ‡∏ö‡∏ö /uploads/xxx.jpg ‡∏´‡∏£‡∏∑‡∏≠ uploads/xxx.jpg
    String cleanPath = imagePath.replaceFirst(RegExp(r'^/+'), '');
    return '$_baseUrl/$cleanPath';
  }
}
